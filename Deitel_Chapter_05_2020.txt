// Deitel_05_2020.cpp : This file contains some exercises for chapter 5 Deitel 7th edition
//

#include <iostream>
#include <string>
#include <iomanip>
#include <cmath>
#include <chrono>
#include <cstdlib> // contains function prototype for rand. iffy with "cout is ambiguous warning". comment/uncomment if necessary
#include <ctime>

using namespace std;
using namespace chrono;


// function prototypes

void sumIntegers(); // exercise 5.2a 
void printValues(); // exercise 5.2b
void usingPow(); // exercise 5.2c
void printIntegersWhile(); // exercise 5.2d
void printIntegersFor(); // exercise 5.2e
void summingIntegers(); // exercise 5.5
void averagingIntegers(); // exercise 5.6
void rectangleXY(); // exercise 5.7
void findSmallestInteger(); // exercise 5.8
void productOfOddIntegers(); // exercise 5.9
void factorials(); // exercise 5.10
void compoundInterest(); // exercise 5.11
void patternsNestedForLoops01(); // exercise 5.12_a
void patternsNestedForLoops02(); // exercise 5.12_b
void patternsNestedForLoops03(); // exercise 5.12_c
void patternsNestedForLoops04(); // exercise 5.12_d
void allPatterns(); // exercise 5.12 extra credit
void barChart(); // exercise 5.13
void totalSales(); // exercise 5.14
void convertGradesToPoints(); // exercise 5.15
void compoundInterestCalculations(); // exercise 5.16
int decToBin(int); // used for exercise 5.18
void numberSystemTable(); // exercise 5.18
void pi(); // exercise 5.19
void pythoreanTriples(); // exercise 5.20
void calculatingSalaries(); // exercise 5.21
void deMorgansLaw(); // exercise 5.22
void diamondPattern01(); // exercise 5.23 & 5.24
void removingBreak(); // exercise 5.25
void removingContinue(); // exercise 5.27
void peterMinuitProblem(); // exercise 5.29
void twelveDaysXmas(); // exercise 5.28

int main()
{
    // calling functions

    //sumIntegers(); // exercise 5.2a 
    //printValues(); // exercise 5.2b
    //usingPow(); // exercise 5.2c
    //printIntegersWhile(); // exercise 5.2d
    printIntegersFor(); // exercise 5.2e
    //summingIntegers(); // exercise 5.5
    //averagingIntegers(); // exercise 5.6    
    //rectangleXY(); // exercise 5.7
    //findSmallestInteger(); // exercise 5.8
    //productOfOddIntegers(); // exercise 5.9
    //factorials(); // exercise 5.10
    //compoundInterest();  // exercise 5.11
    //patternsNestedForLoops01(); // exercise 5.12_a
    //patternsNestedForLoops02(); // exercise 5.12_b
    //patternsNestedForLoops03(); // exercise 5.12_c
    //patternsNestedForLoops04(); // exercise 5.12_d
    //allPatterns(); // exercise 5.12 extra credit
    //barChart(); // exercise 5.13
    //totalSales(); // exercise 5.14
    //convertGradesToPoints(); // exercise 5.15
    //compoundInterestCalculations(); // exercise 5.16
    //numberSystemTable(); // exercise 5.18
    //pi(); // exercise 5.19
    //pythoreanTriples(); // exercise 5.20
    //calculatingSalaries(); // exercise 5.21
    //deMorgansLaw(); // exercise 5.22
    //diamondPattern01(); // exercise 5.23 & 5.24 
    //removingBreak(); // exercise 5.25
    //removingContinue(); // exercise 5.27
    //peterMinuitProblem(); // exercise 5.29   
    //twelveDaysXmas(); // exercise 5.28
    
}

// function definitions

void averagingIntegers() // exercise 5.6
{
    double number = 0;
    double sum = 0;
    double average = 0;
    const int sentinel = 9999;

    for (int n = 1; n != sentinel; n++)
    {
        cout << "Enter an integer (enter 9999 to end): ";
        cin >> number;

        if (number == sentinel)
            break;
        else sum += number;

        average = sum / n;
    }
    cout << "The average for the numbers entered = " << average << endl << endl;
}

void summingIntegers() // exercise 5.5
{
    int number = 0;
    int sum = 0;
    int n;

    cout << "Enter the number of integers to add: ";
    cin >> n;

    for (int i = 1; i <= n; i++)
    {
        cout << "Enter an integer : ";
        cin >> number;
        sum += number;
    }
    cout << "The sum for the numbers entered = " << sum << endl << endl;
}

void rectangleXY() // exercise 5.7
{
    int x;
    int y;

    cout << "Enter two integers between 1 and 20: ";
    cin >> x >> y;

    for (int i = 1; i <= y; i++)
    {
        for (int j = 1; j <= x; j++)
            cout << "@";
        cout << endl;
    }
}

void productOfOddIntegers() // exercise 5.9
{
    int number;
    int product = 1;

    cout << "Enter an upper limit: ";
    cin >> number;

    for (int i = 1; i <= number; i++)
        if (i % 2 != 0)
            product *= i;
    cout << "The product of odd integers from 1 to " << number << " = " << product << endl << endl;
}

void findSmallestInteger() // exercise 5.8
{
    int n;
    int number = 0;
    int smallest = 0;

    cout << "Enter how many integers to enter: ";
    cin >> n;

    for (int i = 1; i <= n; i++)
    {
        cout << "Enter an integer: ";
        cin >> number;

        if (i == 1) // set 1st iteration
            smallest = number;
        else if (number < smallest)
            smallest = number;
    }
    cout << "\nThe smallest number entered is: " << smallest << endl << endl;
}

void patternsNestedForLoops01() // exercise 5.12_a
{
    int size;
    
    cout << "Enter a pattern size: ";
    cin >> size;
    cout << endl;

    for (int row = 1; row <= size; row++) // row for loop 1 , 2, 3, ... 10
    {
        for (int col = 1; col <= row; col++) // col for loop [1,(1)]; [2, (1, 2)]; [3, (1,2,3)]; ...; [10, (1,2,3, ... 10)]
        {
        cout << "*";
        }
        cout << endl;
    }
    cout << endl;
}

void patternsNestedForLoops02() // exercise 5.12_b
{
    int size;

    cout << "Enter a pattern size: ";
    cin >> size;
    cout << endl;

    for (int row = 1; row <= size; row++) // row for loop 1 , 2, 3, ... 10
    {
        for (int col = 1; (col + row) <= size + 1; col++) // col for loop [1,(1,2,3, ... 10)]; [2,(3,...9)]; [...]; [10,(1)]
        {
            cout << "*";
        }
        cout << endl;
    }
    cout << endl;
}

void patternsNestedForLoops03() // exercise 5.12_c
{
    int size;
    
    cout << "Enter a pattern size: ";
    cin >> size;
    cout << endl;

   for (int row = 1; row <= size; row++) // row for loop 1 , 2, 3, ... 10
    {
       for (int col = 1; col <= size; col++) // col for loop [1,(1,2,3, ... 10)]; [2,(3,...9)]; [...]; [10,(1)]
       {
           col >= row ? cout << "*": cout << " ";
       }
       cout << endl;
    }   
   cout << endl;
}

void patternsNestedForLoops04()
{
    int size;

    cout << "Enter a pattern size: ";
    cin >> size;
    cout << endl;

    for (int row = 1; row <= size; row++) // row for loop 1 , 2, 3, ... 10
    {
        for (int col = 1; col <= size ; col++) // col for loop [1,(1,2,3, ... 10)]; [2,(3,...9)]; [...]; [10,(1)]
        {
            col <= (size - row) ? cout << " " : cout << "*";
        }
        cout << endl;
    }
    cout << endl;
}

void allPatterns()
{
    int size;   
        
    cout << "Enter a pattern size: ";
    cin >> size;
    cout << endl; 
           
    for (int row = 1; row <= size; row++) // row for loops 1,2,3,... 10 
    {                                           
        for (int col = 1; col <= row; col++) // col for loop [1,(1)]; [2, (1,2)]; [3,(1,2,3)]; ...; [10,(1,2,3, ... 10)] ==> 1st pattern
            cout << "*" ; // notation ==> [row,(columns)]; [row,(columns)];  ... [row,(columns)]                
               
        for (int col = row; col <= size; col++) // filler spaces
            cout << " " ; 

        for (int col = 1; (col + row) <= (size + 1) ; col++) // col for loop [1,(1,2,3...9,10)]; [2,(1,2,...9)]; [3,(1,2,...8)]; ...; [10,(1)] ==> 2nd pattern
            cout << "*"; 

        for (int col = 1; col <= row; ++col) // filler spaces (copied from 1st pattern)
            cout << " ";       
           
        for (int col = 1; col <= row; col++) // filler spaces (copied from 1st pattern)
            cout << " "; //       

        for (int col = 1; (col + row) <= (size + 1); col++) //  ==> 3rd pattern (copied from 2nd pattern)
            cout << "*";

        for (int col = 1; (col + row) <= (size + 1); col++) // filler (copied from 2nd pattern)
            cout << " ";

        for (int col = 1; col <= row; col++) // ==> 4th pattern (copied from 1st pattern)
            cout << "*"; // 

        cout << endl;
       
    }       
    cout << endl;        
}

void pi() // exercise 5.19
{
    double numerator = 0;
    int denominator = 0;
    double summation = 0;

    cout << "iterator" << setw(15) << "numerator" << setw(15) << "denominator" << setw(10) << setprecision(15) << fixed << "pi" << endl;
    cout << "================================================" << endl;
    
    for (int i=1;i <= 10000; i++)
    {
        numerator = -4 * pow(-1, i);
        denominator = (2 * i - 1);
        summation += numerator / denominator;

        cout << left << setw(15) << i << setw(15) << numerator << setw(15) << denominator << setw(15) << summation << endl;
    }       
}

void diamondPattern01() // exercise 5.23
{
    int size;
    int median;    

    cout << "Enter a pattern size (an odd number): ";
    cin >> size;
    cout << endl;

    auto begin = std::chrono::high_resolution_clock::now();

    median = (size + 1) / 2;
    int row = 1;

    for (row; row <= size; row++)
    {
        int col = 1;
        for (col; col <= size; ++col)
        {
            if ((row <= median) && ((row + col > median) && (col - row < median))  // asterisks for top half of diamond pattern
                || ((row > median) && ((row - col <  median) && (row + col < 3 * median)))) // asterisks for bottom half
                
                cout << "*";
            
            // optional else if; if left out, spaces will print to the right of asterisks. 
            // if included unnecessary spaces will not be printed and program will run faster when included            
            else if (row + col >= (2 * row + median)||( row + col >= 3*median)) 
                break; 

            else
                cout << " "; // print spaces to the left of asterisks
        }            
        cout << endl;        
    }  

    auto end = std::chrono::high_resolution_clock::now();
    auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);

    cout << "Time measured:\n" << elapsed.count() * 1e-9 << endl;    
}

void pythoreanTriples()
{
    cout << setw(8) << "side1" << setw(16) << "side2" << setw(20) << "hypotenuse" << endl;
    cout << "============================================" << endl;
    for (int i = 1; i <= 500; i++) // 1st side
    {
        for (int j = 1; j <= 500; j++) // 2nd side
        {
            for (int k = 1; k <= 500; k++) // hypotenuse
            {
                if ((i * i) + (j * j) == (k * k))
                    cout << setw(4) << i << " (" << i*i << ")\t" << setw(4) << j << " (" << j * j << ")\t" << setw(4) << k << " (" << k * k << ")" << endl;
            }   
        }  
    }
    cout << "============================================" << endl;
    cout << setw(8) << "side1" << setw(16) << "side2" << setw(20) << "hypotenuse" << endl;
    cout << endl;
}

void factorials()
{
    int n;
    double factorial;

    cout << "Enter a non-negative integer: ";
    cin >> n;

    cout << "\ninteger" << setw(15) << "factorial" << endl;
    cout << "======================" << endl;

    for (int j = 1; j <= n; j++)        
    {
        factorial = 1;
        for (int i = j; i >= 1; i--)
        {
            factorial *= i;
        }
        cout <<  j << "\t" << setw(14) << factorial << endl;
    }    
    cout << endl;
}

void barChart()
{
    int size;

    srand(static_cast<unsigned int> (time(0)));

    cout << "Enter sample size: ";
    
    cin >> size;

    cout << "Randomly generated barchart" << endl;
    cout << "===========================" << endl << endl;

    for (int i = 0; i <= size; i++)
    {
        int bar = rand() %100;
        cout << setw(3) << bar <<  ": ";
        
        for (int j = 1; j <= bar; j++)
            cout << "*";

        cout << endl;
    }
}

void compoundInterestCalculations() // exercise 5.16
{
    int amount;
    int principal = 10000000;
    int rate = 5;
    int interest;
    
    cout << "Year" << setw(21) << "Amount on deposit" << endl;

    cout <<  fixed << setprecision(2);
   
    for (int year = 1; year <= 10; ++year)
    {
       
        amount = ((principal * (100 + rate))) ;
        interest = (amount/100 - principal);
        principal = principal + interest;
        
        int cents;
        int dollars;

        dollars = principal / 10000; // dollar amount
        cents = ((principal % 10000) / 10 + 5) / 10; // cents; roundup to avoid truncating

        cents == 0 ? cout << year << "\t" << setw(13) << dollars << ".00" << endl: // display .0 as .00
        cout <<  year << "\t" << setw(13) << dollars << "."  <<  cents << endl;
    }
}

void compoundInterest() // exercise 5.11
{
    double amount = 0.0;
    double principal = 1000.0;
    double rate = 0.0;

    cout << fixed << setprecision(2);
    
    for (rate = 0.05; rate <= 0.1; rate +=0.01)
    {
        cout << "Rate" << setw(10) << "Year" << setw(21) << "Amount on deposit" << endl;
        for (int year = 1; year <= 10; year++)
        {
            amount = principal * pow(1.0 + rate, year);

            cout << rate << setw(10) << year << setw(21) << amount << endl;
        }
        cout << endl;        
    }    
    cout << endl << endl;
}

int decToBin(int number) // not an exercise
{
    int binNumber = 0;
    int powOfTen;

    int temp = number;

    while (temp > 0)
    {
        // conditional ternary operator (?:)
        temp == number ? (powOfTen = 1) : (powOfTen *= 10); // "if statement" to assign powOfTen (1, 10, 100, 1000 ) and to start at 1
        binNumber += temp % 2 * powOfTen; //
        temp /= 2; // divide repeatedly by 2        
    }
    return binNumber;
}

void numberSystemTable() // exercise 5.18
{
    //cout << fixed << setprecision(2);

    cout << "Decimal" << setw(12) << "binary" << setw(10) << "Octal" << setw(15) << "Hexadecimal" << endl;
    for (int number = 1; number <= 256; number++)
    {
        cout << setw(7) << number << setw(12) << decToBin(number) << setw(10) << oct << number << setw(15) << hex << number << dec << endl;        
    }
}

void deMorgansLaw() // exercise 5.22
// De Morgan's law:
// !(P AND Q) == (!P OR !Q)
// !(P OR Q) == (!P AND !Q)
{
    int x, y, a, b, g, i, j;

    cout << "\nProve (!P && !Q) is equivalent to !(P || Q)" << endl << endl;
    
    cout << "Enter a value for x: ";
    cin >> x;
    cout << "Enter a value for y: ";
    cin >> y;
    
    cout << "\nx = " << x << " and let " << "y = " << y << endl << endl;

    cout << "!(x < 5)" << "\t!(y >= 7)" << "\t(x < 5)" << "\t\t(y >= 7)" << endl;
    cout << "========================================================" << endl;
    cout << boolalpha << !(x < 5) << "\t\t" << !( y >= 7 ) << "\t\t" << (x < 5) << "\t\t" << (y >= 7) << endl << endl;
    
    cout << "!(x < 5) && !(y >= 7):  " << (!(x < 5) && !(y >= 7)) << endl;    
    cout << "!((x < 5) || (y >= 7)): " << !((x < 5) || (y >= 7)) << endl << endl;

    cout << "\nProve !P || !Q is equivalent to !(P && Q)" << endl << endl;

    cout << "Enter a value for a: ";
    cin >> a;
    b = a;
    cout << "Enter a value for g: ";
    cin >> g;

    cout << "\nLet a and b = " << a << " and let " << "g = " << g << endl << endl;

    cout << "!(a == b)" << "\t!(g != 5)" << "\t(a == b)" << "\t(g != 5)" << endl;
    cout << "========================================================" << endl;
    cout << boolalpha << !(a == b) << "\t\t" << !(g != 5) << "\t\t" << (a == b) << "\t\t" << (g != 5) << endl << endl;

    cout << "!(a == b) || !(g != 5):  " << (!(a == b) || !(g != 5)) << endl;
    cout << "!((a == b) && (g != 5)): " << !((a == b) && (g != 5)) << endl << endl;

    cout << "\nProve !(P && Q) is equivalent to !P || !Q" << endl << endl;

    cout << "Enter a value for x: ";
    cin >> x;
  
    cout << "Enter a value for y: ";
    cin >> y;

    cout << "\nLet x = " << x << " and let " << "y = " << y << endl << endl;

    cout << "(x <= 8)" << "\t(y > 4)" << "\t\t!(x <= 8)" << "\t!(y > 4)" << endl;
    cout << "========================================================" << endl;
    cout << boolalpha << (x <= 8) << "\t\t" << (y > 4) << "\t\t" << !(x <= 8) << "\t\t" << !(y > 4) << endl << endl;

    cout << "!((x <= 8) && (y > 4)): " << !((x <= 8) && (y > 4)) << endl;
    cout << "!(x <= 8) || !(y > 4):  " << (!(x <= 8) || !(y > 4)) << endl << endl;

    cout << "\nProve !(P || Q) is equivalent to !P && !Q" << endl << endl;

    cout << "Enter a value for i: ";
    cin >> i;

    cout << "Enter a value for j: ";
    cin >> j;

    cout << "\nLet i = " << i << " and let " << "j = " << j << endl << endl;

    cout << "(i > 4)" << "\t\t(j <= 6)" << "\t!(i > 4)" << "\t!(j <= 6)" << endl;
    cout << "========================================================" << endl;
    cout << boolalpha << (i > 4) << "\t\t" << (j <= 6) << "\t\t" << !(i > 4) << "\t\t" << !(j <= 6) << endl << endl;

    cout << "!((i > 4) || (j <= 6)): " << !((i > 4) || (j <= 6)) << endl;
    cout << "!(i > 4) && !(j <= 6):  " << (!(i > 4) && !(j <= 6)) << endl << endl;
}

void totalSales() // exercise 5.14
{
    char product = 0;
    int quantity; 
    double price;
    double retailValue = 1;
    double totalRetailValue = 0;    
       
    while ( true && product != 'q' )
        {
        cout << "Enter a Product number (1 to 5 or q to quit): ";        
        cin >> product;
        
        if (product == 'q')
            break;

            switch (product)
            {
            case '1':
                price = 2.98;
                goto printout;

            case '2':
                price = 4.50;

            case '3':
                price = 9.98;
                goto printout;

            case '4':
                price = 4.49;
                goto printout;

            case '5':
                price = 6.87;
                goto printout;                         

            case '\n':
            case '\t':
            case ' ':
            case 'q':
                break;

            default:                
                {
                    cout << "Incorrect input." << endl;
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignores invalid cases like '7' or 'f' or multiple character entries like 'asdfsdf'
                    break;
                }

            printout:            
                cout << "Enter a quantity: ";
                cin >> quantity;
                while (cin.fail())
                {
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignores invalid cases like '7' or 'f' or multiple character entries like 'asdfsdf'
                    cout << "Enter a valid quantity: ";
                    cin >> quantity;
                }
                retailValue = price * quantity;
                cout << "Retail value: $" << retailValue << " @ " << "$" << price << " each" << endl << endl;
                totalRetailValue += retailValue;
                cin.clear();
                cin.ignore();
                break;

            } // end of switch        

        }    // end of while  

    cout << "\nTotal Retail value of products sold = $" << totalRetailValue << endl << endl;
}


void calculatingSalaries() // exercise 5.21
{
    int intCode = 0;
    double salary = 0;
    double totalSalaries = 0;
    double hours;
    double hourlyWage;
    double sales;
    double partQuantity;
    double wagePerPart = 11.00;

    cout << "Employee\tCode" << endl;
    cout << "====================" << endl;
    cout << "Code 1" << "\t\tManager" << endl;
    cout << "Code 2" << "\t\tHourly Worker" << endl;
    cout << "Code 3" << "\t\tCommissioned Employee" << endl;
    cout << "Code 4" << "\t\tPiece Workers" << endl << endl;
    
    while (intCode != -1)
    {
        cout << "Enter an employee code (-1 to quit): ";
        cin >> intCode;
        //cout << intCode << endl;

    exit:
        if (intCode == -1)
        {
            cout << "Program is now exiting" << endl << endl;
            break;
        }

        while (intCode < -1 || intCode > 4 || intCode == 0 ) 
        {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "Invalid entry (-1 to quit): " ;
            cin >> intCode;
            if (intCode == -1)            
                goto exit;                
        }        

        char code = '0' + intCode; // convert integer input into a char
        //cout << code << endl;        

        switch (code)
        {
        case '1':
            cout << "Enter this manager's weekly salary: $";
            cin >> salary;
            if (cin.fail())
                goto fail;
            totalSalaries += salary;
            cout << "Weekly salary earned by manager: $";
            goto printout;

        case '2':
            cout << "Enter the weekly hours worked for this employee: ";
            cin >> hours;
            if (cin.fail())
                goto fail;
            cout << "Enter the hourly salary for this employee: $";
            if (cin.fail())
                goto fail;
            cin >> hourlyWage;

            if (hours <= 40)
                salary = hours * hourlyWage;
            else
                salary = (40 * hourlyWage) + 1.5 * (hours - 40);
            totalSalaries += salary;
            cout << "Weekly salary earned by hourly work: $"; 
            goto printout;

        case '3':
            cout << "Enter weekly sales for this commissioned employee: ";
            cin >> sales;
            if (cin.fail())
                goto fail;
            salary = 250 + (0.057 * sales);
            totalSalaries += salary;
            cout << "Weekly wage earned by commissions: $"; 
            goto printout;

        case '4':
            cout << "Enter the number of parts produced by this employee: ";
            cin >> partQuantity;
            if (cin.fail())
                goto fail;
            salary = partQuantity * wagePerPart;
            totalSalaries += salary;
            cout << "Weekly wage earned by pieceworker: $";
            goto printout;

        case '\n':
        case '\t':
        case ' ':        
            break;

        default:
            cout << "Invalid entry." << endl << endl;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignores invalid cases like '7' or 'f' or multiple character entries like 'asdfsdf'
            break;

        printout:
            cout << salary << endl;
            cout << "Payroll subtotal: $" << totalSalaries << endl << endl;
            salary = 0;
            cin.clear();
            cin.ignore();
            break;

        fail:
            while (cin.fail() && code != '-1')
            {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignores invalid cases like '7' or 'f' or multiple character entries like 'asdfsdf'
                cout << "Invalid entry." << endl << endl;
                salary = 0;
                break;
            }                   
        }   // end of switch   
    } // end of while
    cout << "Total Salaries paid: $" << totalSalaries << endl << endl;
}        

void removingBreak() // exercise 5.25
{
    int count = 1;
    int escape = 0;
      
    // book example commented out
   /* for (int count = 1; count <= 10; count++)
    {
        if (count == 5)
            break;
       
        cout << count << " ";
    } */

   // exiting loop with an else statment
    for (count; count <= 10;)
    {
        if (count < 5) 
        {
            cout << count << " ";
            count += 1;
            escape = count;
        }            
        else count += 6;        
    }           
  
    cout << "\nBroke out of loop at count = " << escape << endl;
}

void removingContinue() // exercise 5.27
{
    int count;
    int skipped = 0;

    // book example commented out
    /* for (count = 1; count <= 10; count++)
    {
        if (count == 5)
            continue;

        cout << count << " ";
    } */

    // 1st method; hard to understand

    for (count = 1; count <= 10; (!((count+1) % 5 == 0 && (count + 1) != 10) ? count++ : count +=2))
    {
        cout << count << " ";
    }

    cout << "\n(Hard coded method to skip 5)" << endl;
    cout << endl;

    // 2nd method; using a structured equivalent

    cout << "Enter integer to skip (between 1 and 10): ";
    cin >> skipped;

    for (count = 0; count < 10;)
    {
        count += 1;
        if (count < skipped || count > skipped)
        {
            cout << count << " ";                       
        }
        else skipped = count;
    }
    cout << endl << endl;
    cout << "Continued after skipping " << skipped << endl << endl;
}


void peterMinuitProblem() // exercise 5.29
{
    double amount;
    double principal = 24.0;
    double rate = 0.05;    
    
    cout << fixed << setprecision(2);

    // calculate amount on deposit for each year since 1626

    for (double rate = 0.05; rate <= 0.10; rate += 0.01)
    {
        cout << "Year" << "\t" << "Amount on deposit" << "\t" << "interest rate: (" << rate << ")" << endl;
        for (int year = 1; year <= 394; year += 1)
        {
            amount = principal * pow(1.0 + rate, year);
            cout << setw(4) << year << setw(11) << "$" << amount << endl;
        }
        cout << endl;
    }
    cout << endl << endl;
}

void twelveDaysXmas() // exercise 5.28
{
    int day;
    cout << "Enter a day (1 through 12): ";
    cin >> day; 

    while (cin.fail())
    {
        cin.clear();
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignores characters'
        cout << "Invalid entry." << endl << endl;
        break;
    }

    while (day > 12 || day < 1)
    {
        cout << "Incorrect day. Please enter a day (1 through 12) ";
        cin >> day;
    }
   
    cout << endl;

    switch (day)
    {
    case 12:
        cout << "On the twelfth day of Christmas, my true love sent to me Twelve drummers drumming," << endl;

    case 11:        
        if (day > 11)        
            cout << "Eleven pipers piping," << endl;  
        else cout << "On the eleventh day of Christmas, my true love sent to me Eleven pipers piping," << endl;

    case 10:        
        if (day > 10)
            cout << "Ten lords a - leaping," << endl;
        else cout << "On the tenth day of Christmas, my true love sent to me Ten lords a - leaping," << endl;

    case 9:
        if (day > 9)
            cout << "Nine ladies dancing," << endl; 
        else cout << "On the ninth day of Christmas, my true love sent to me Nine ladies dancing," << endl;

    case 8:
        if (day > 8)
            cout << "Eight maids a - milkin," << endl; 
        else cout << "On the eighth day of Christmas, my true love sent to me Eight maids a - milking," << endl;

    case 7:
        if (day > 7)
            cout << "Seven swans a - swimming," << endl;  
        else cout << "On the seventh day of Christmas, my true love sent to me Seven swans a - swimming," << endl;

    case 6:
        if (day > 6)
            cout << "Six geese a - laying," << endl; 
        else cout << "On the sixth day of Christmas, my true love sent to me Six geese a - laying," << endl;

    case 5:
        if (day > 5)
            cout << "Five golden rings," << endl;
        else cout << "On the fifth day of Christmas, my true love sent to me Five golden rings," << endl;

    case 4:
        if (day > 4)
            cout << "Four calling birds," << endl;  
        else cout << "On the fourth day of Christmas, my true love sent to me Four calling birds," << endl;

    case 3:
        if (day > 3)
            cout << "Three french hens," << endl;
        else cout << "On the third day of Christmas, my true love sent to me Three french hens," << endl;

    case 2:
        if (day > 2)
            cout << "Two turtle doves," << endl;
        else cout << "On the second day of Christmas, my true love sent to me Two turtle doves," << endl;

    case 1:
        if (day > 1)
            cout << "and a partridge in a pear tree." << endl;
        else cout << "On the first day of Christmas, my true love sent to me A partridge in a pear tree." << endl;
        break;   
        
    }
    cout << endl;
}

void convertGradesToPoints() // exercise 5.15
{
    int grade;
    double aCount = 0;
    double bCount = 0;
    double cCount = 0;
    double dCount = 0;
    double fCount = 0;
    double gradePointAverage;

    cout << "Enter the letter grades. " << endl
    << "Enter the EOF character to end input. " << endl;   

    // loop until user types end-of-file key sequence
    while ((grade = cin.get()) != EOF)
    {
        switch (grade)
        {
        case 'A':
        case 'a':
            aCount++;
            break;
        case 'B':
        case 'b':
            bCount++;
            break;
        case 'C':
        case 'c':
            cCount++;
            break;
        case 'D':
        case 'd':
            dCount++;
            break;
        case 'F':
        case 'f':
            fCount++;
            break;
        case '\n':
        case '\t':
        case ' ':
            break;
        default:
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignores characters'
            cout << "Invalid entry. Enter a letter grade (A to F)." << endl;
            break;
        }
    }
    cout << endl;
    gradePointAverage = ( (aCount * 4) + (bCount * 3) + (cCount * 2) + (dCount * 1) + (fCount * 0) ) / (aCount + bCount + cCount + dCount + fCount);
    cout << "Total gradepoint: " << (aCount * 4) + (bCount * 3) + (cCount * 2) + (dCount * 1) + (fCount * 0) << endl;
    cout << "Total exams taken: " << (aCount + bCount + cCount + dCount + fCount) << endl;    
    cout << "Gradepoint Average = " << setprecision(3) << gradePointAverage << endl << endl;
}

void sumIntegers() // exercise 5.2a
{
    int sum = 0;
    int number;

    cout << "Enter an integer: ";
    cin >> number;
    cout << endl;
        
    int median = number / 2;
    //cout << "median = " << median << endl;
    
    //add all numbers between 1 and number
    if(number%2 == 0)
        sum = median * (number + 1); // add all numbers between 1 and number, if number is even
    else
        sum = median * (number + 2) + 1; // add all numbers between 1 and number, if number is odd
    
    cout << "Sum of all numbers between 1 and " << number << " = " << sum << endl << endl;
    
    // add all odd numbers between 1 and number
    int sumOdd = sum - (median * (median + 1));   
    cout << "Sum of all odd numbers between 1 and " << number << " = " << sumOdd << endl << endl;

    // add all even numbers between 1 and number
    int sumEven = sum - sumOdd;
    cout << "Sum of all even numbers between 1 and " << number << " = " << sumEven << endl << endl;
    
}

void printValues() // exercise 5.2b
{
    // print the value 333.546372 in a 15 character field with precisions of 1, 2, and 3.  
    // print each number on the same line. left justify each number in it's field.

    double value = 333.546372;
    cout << left << setw(15) << fixed << setprecision(1) << value << setw(15) << fixed << setprecision(2)
        << value << setw(15) << fixed << setprecision(3) << value << endl;
}

void usingPow() // exercise 5.2c
{
    cout << fixed << setprecision(2) << setw(10) << pow(2.5, 3) << endl;
} 

void printIntegersWhile() // exercise 5.2d
{
    int x = 0;
    
    while (x < 20)
    {
        ++x;
        if (x % 5 == 0)
            cout << x << "\t" << endl;
        else
            cout <<  x << "\t";
    }     
    cout << endl;
}

void printIntegersFor() // exercise 5.e
{
    for(int x = 1; x <= 20; x++)
        if (x % 5 == 0)
            cout << x << "\t" << endl;
        else
            cout << x << "\t";
}
